{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GokulakrishnanK\\\\Downloads\\\\Admin_dashboard\\\\Admin_dashboard\\\\Client\\\\src\\\\charts\\\\TopPerformersTable.jsx\";\n// TopPerformersTable.js\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopPerformersTable = ({\n  data\n}) => {\n  // Check if data is available\n  if (!data || !Array.isArray(data) || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available for the table.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 12\n    }, this); // Display a message if no data\n  }\n  // console.log(data[0].marks[\"mark1\"]);\n\n  // Calculate average marks for each employee\n  const averageMarks = data.reduce((acc, item) => {\n    if (!acc[item.name]) {\n      console.log(acc, \"Acc\");\n      acc[item.name] = {\n        name: item.name,\n        totalMarks: item.marks[\"mark1\"],\n        count: 0\n      };\n    }\n    // acc[item.name].totalMarks += item.avg_mark || 0; // Add avg_mark to total\n    acc[item.name].count += 1; // Increment count for averaging\n    return acc;\n  }, {});\n  console.log(averageMarks, \"marks\");\n\n  // Prepare the data for the table and sort it in descending order by average marks\n  const tableData = Object.values(averageMarks).map(emp => ({\n    name: emp.name,\n    avg_mark: (emp.totalMarks / emp.count).toFixed(2) // Calculate average\n  })).sort((a, b) => b.avg_mark - a.avg_mark); // Sort in descending order\n  console.log(tableData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-x-auto \",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-dark font-bold text-center mb-5\",\n      children: \"Top Performers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"min-w-full bg-whiter\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-darker text-whiter\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"py-3 px-4 text-left\",\n            children: \"Employee Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"py-3 px-4 text-left\",\n            children: \"Average Marks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableData.map((emp, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"border-b hover:bg-gray-100\",\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"py-3 px-4\",\n            children: emp.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"py-3 px-4\",\n            children: emp.avg_mark\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_c = TopPerformersTable;\nexport default TopPerformersTable;\nvar _c;\n$RefreshReg$(_c, \"TopPerformersTable\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","TopPerformersTable","data","Array","isArray","length","children","fileName","_jsxFileName","lineNumber","columnNumber","averageMarks","reduce","acc","item","name","console","log","totalMarks","marks","count","tableData","Object","values","map","emp","avg_mark","toFixed","sort","a","b","className","index","_c","$RefreshReg$"],"sources":["C:/Users/GokulakrishnanK/Downloads/Admin_dashboard/Admin_dashboard/Client/src/charts/TopPerformersTable.jsx"],"sourcesContent":["// TopPerformersTable.js\r\nimport React from \"react\";\r\n\r\nconst TopPerformersTable = ({ data }) => {\r\n  // Check if data is available\r\n  if (!data || !Array.isArray(data) || data.length === 0) {\r\n    return <div>No data available for the table.</div>; // Display a message if no data\r\n  }\r\n  // console.log(data[0].marks[\"mark1\"]);\r\n\r\n  // Calculate average marks for each employee\r\n  const averageMarks = data.reduce((acc, item) => {\r\n    if (!acc[item.name]) {\r\n      console.log(acc, \"Acc\");\r\n\r\n      acc[item.name] = {\r\n        name: item.name,\r\n        totalMarks: item.marks[\"mark1\"],\r\n        count: 0,\r\n      };\r\n    }\r\n    // acc[item.name].totalMarks += item.avg_mark || 0; // Add avg_mark to total\r\n    acc[item.name].count += 1; // Increment count for averaging\r\n    return acc;\r\n  }, {});\r\n  console.log(averageMarks, \"marks\");\r\n\r\n  // Prepare the data for the table and sort it in descending order by average marks\r\n  const tableData = Object.values(averageMarks)\r\n    .map((emp) => ({\r\n      name: emp.name,\r\n      avg_mark: (emp.totalMarks / emp.count).toFixed(2), // Calculate average\r\n    }))\r\n    .sort((a, b) => b.avg_mark - a.avg_mark); // Sort in descending order\r\n  console.log(tableData);\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto \">\r\n      <h1 className=\"text-dark font-bold text-center mb-5\">Top Performers</h1>\r\n      <table className=\"min-w-full bg-whiter\">\r\n        <thead>\r\n          <tr className=\"bg-darker text-whiter\">\r\n            <th className=\"py-3 px-4 text-left\">Employee Name</th>\r\n            <th className=\"py-3 px-4 text-left\">Average Marks</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {tableData.map((emp, index) => (\r\n            <tr key={index} className=\"border-b hover:bg-gray-100\">\r\n              <td className=\"py-3 px-4\">{emp.name}</td>\r\n              <td className=\"py-3 px-4\">{emp.avg_mark}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopPerformersTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}